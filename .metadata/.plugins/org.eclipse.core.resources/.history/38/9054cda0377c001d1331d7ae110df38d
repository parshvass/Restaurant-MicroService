package com.deloitte.controller;

import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.deloitte.entity.Orders;
import com.deloitte.model.Food;
import com.deloitte.model.Response;
import com.deloitte.service.OrdersServiceImpl;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@RestController
@RequestMapping("/orders")
public class OrdersController {
	final String GET_FOOD = "http://localhost:8081/food/fetchFoodByID/";
	final String GET_ORDERED_FOOD = "http://localhost:8081/food/fetchFoodByOrdersID/";

	@Autowired
	private RestTemplate restTemplate;

	@Autowired
	private OrdersServiceImpl ordersService;

	@GetMapping("/fetchAllOrders")
	public List<Orders> fetchOrders() {
		return ordersService.fetchAllOrders();
	}

	@GetMapping("/fetchPrepTime/{ordersID}")
	@HystrixCommand(fallbackMethod = "fetchPrepTimeFaliureFallBack")
	public ResponseEntity<?> fetchPrepTime(@PathVariable Integer ordersID) {
		List<Food> completeOrder = restTemplate.getForObject(GET_ORDERED_FOOD + ordersID, List.class);
		System.out.println("completeOrder:" + completeOrder);
		Integer prepTime = 0;
		prepTime = Calculator.calcualtePrepTime(completeOrder);
		System.out.println("prepTime: "+prepTime);
		Response response = new Response(prepTime,"hello");
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}

	public ResponseEntity<?> fetchPrepTimeFaliureFallBack(@PathVariable Integer orderID) {
		Integer foodID = ordersService.fetchPrepTime(orderID);
		Response response = new Response(foodID, "Food-MS is unvailable at the momentss");
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}

	@GetMapping("/orderIsPaid/{orderID}")
	public Boolean orderIsPaid(@PathVariable Integer orderID) {
		return ordersService.orderIsPaid(orderID);
	}

	@GetMapping("/orderAmount/{orderID}")
	public Double orderAmount(@PathVariable Integer orderID) {
		return ordersService.orderAmount(orderID);
	}

	@GetMapping("/fetchOrderByID/{orderID}")
	public Orders fetchOrderByID(@PathVariable Integer orderID) {
		return ordersService.fetchOrderByOrderID(orderID);
	}

	@GetMapping("/fetchByCustomersID/{customersID}")
	public List<Orders> fetchByCustomersID(@PathVariable Integer customersID) {
		return ordersService.fetchOrderByCustomerID(customersID);
	}

	@GetMapping("/fetchCompleteOrderByID/{ordersID}")
	@HystrixCommand(fallbackMethod = "fetchCompleteOrderByIDFallBack")
	public ResponseEntity<?> fetchCompleteOrderByID(@PathVariable Integer ordersID) {
		List<Food> completeOrder = restTemplate.getForObject(GET_ORDERED_FOOD + ordersID, List.class);
		Response response = new Response(completeOrder);
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}

	public ResponseEntity<?> fetchCompleteOrderByIDFallBack(@PathVariable Integer ordersID) {
		Response response = new Response(ordersID, "Food-MS is unvailable at the moment");
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}

}

class Calculator{
	public static Integer calcualtePrepTime(List<Food> completeOrder) {
//		return completeOrder.stream().map(x -> x.getFoodPrepTime()).reduce(0, Integer::sum);
		Iterator<Food> iterator = completeOrder.iterator();
		System.out.println(iterator);
		Integer prepTime = 0;
		System.out.println("1234");
		System.out.println("completeOrder.size(): "+completeOrder.size());
		
		while(iterator.hasNext()) {
			System.out.println("Yess");
			Food food = new Food();
			System.out.println(iterator.next());
			prepTime+=10;
			System.out.println("prepTime: "+prepTime);
			}
		System.out.println("5678");
		return prepTime;
	} 
}
