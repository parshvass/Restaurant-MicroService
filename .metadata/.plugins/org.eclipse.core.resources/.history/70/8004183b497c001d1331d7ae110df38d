package com.deloitte.repo;

import java.util.List;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.deloitte.model.Response;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@FeignClient(name = "order-ms")
public interface IOrdersRest {
	@GetMapping("/fetchAllOrders")
	public List<Orders> fetchOrders() {
		return ordersService.fetchAllOrders();
	}

	@GetMapping("/fetchPrepTime/{ordersID}")
	@HystrixCommand(fallbackMethod = "fetchPrepTimeFaliureFallBack")
	public ResponseEntity<?> fetchPrepTime(@PathVariable Integer ordersID) {
		Integer prepTime = restTemplate.getForObject(GET_ORDER_PREP_TIME + ordersID, Integer.class);
		System.out.println("prepTime: "+prepTime);
		Response response = new Response(prepTime,"PrepTime:");
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}

	public ResponseEntity<?> fetchPrepTimeFaliureFallBack(@PathVariable Integer orderID) {
		Integer foodID = ordersService.fetchPrepTime(orderID);
		Response response = new Response(foodID, "Food-MS is unvailable at the momentss");
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}

	@GetMapping("/orderIsPaid/{orderID}")
	public Boolean orderIsPaid(@PathVariable Integer orderID) {
		return ordersService.orderIsPaid(orderID);
	}

	@GetMapping("/orderAmount/{orderID}")
	public Double orderAmount(@PathVariable Integer orderID) {
		return ordersService.orderAmount(orderID);
	}

	@GetMapping("/fetchOrderByID/{orderID}")
	public Orders fetchOrderByID(@PathVariable Integer orderID) {
		return ordersService.fetchOrderByOrderID(orderID);
	}

	@GetMapping("/fetchByCustomersID/{customersID}")
	public List<Orders> fetchByCustomersID(@PathVariable Integer customersID) {
		return ordersService.fetchOrderByCustomerID(customersID);
	}

	@SuppressWarnings("unchecked")
	@GetMapping("/fetchCompleteOrderByID/{ordersID}")
	@HystrixCommand(fallbackMethod = "fetchCompleteOrderByIDFallBack")
	public ResponseEntity<?> fetchCompleteOrderByID(@PathVariable Integer ordersID) {
		List<Food> completeOrder = restTemplate.getForObject(GET_ORDERED_FOOD + ordersID, List.class);
		Response response = new Response(completeOrder);
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}

	public ResponseEntity<?> fetchCompleteOrderByIDFallBack(@PathVariable Integer ordersID) {
		Response response = new Response(ordersID, "Food-MS is unvailable at the moment");
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}
	
	
	
}
